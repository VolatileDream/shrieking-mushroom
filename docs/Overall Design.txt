Overall design of Shrieking Mushroom

Application Layer
	-All parts of the application except for protocol logic, and direct network io

Protocol Layer
	-Contains all (most) of the protocol logic for the application
	-Handles encryption/decryption
	-3 unique sections: TCPserver, TCPclient, Multicast

Networking Layer
	-Contains all direct read/writes to networking interfaces and sockets
	-Requires overhaul of Multicast/UDP, flow only works for TCP structures as UDP/Multicast is a distinct recieve/send situation, and not bi-directional on every connection.

Basic flow:
	Initialize Network layer
	Initialize Protocol layer
	Initialize App layer
	Network -> pushes read/connect/close/error events to the event queue
	Protocol -> reads events from network and passes them to handlers, handlers push read/connect/close/error events into event queue as necessary
	App -> reads events from protocol queue and does whatever it feels like


App
	
	+---------------------------------------+
	|					|
	|		What ever		|
	|					|
	|					|
	|	+-----------------------+	|
	|	|			|	|
	|	|      event handlers	|	|
	|	|			|	|
	|	+-----------------------+	|
	|		|	/\		|
	+---------------|-------|---------------+
			|	|
Protocol		|	|- IEventQueue<IProtocolEvent>
			|	|
			|	|
	+---------------|-------|---------------+
	|		\/	|		|
	|	+-----------------------+	|
	|	|			|	|
	|	|    Message Filter	|	|
	|	|			|	|
	|	+-----------------------+	|
	|		|	/\		|
	|		|	|		|
	|		\/	|		|
	|   +-------------------------------+	|
	|   |				    |	|
	|   |	     Event Handlers	    |	|
	|   |				    |	|
	|   +-------------------------------+	|
	|   		|	/\	    	|
	+---------------|-------|---------------+
			|	|
			|	|- IEventQueue<INetworkEvent>
			|	|
Net			\/	|
	+---------------------------------------+
	|					|
	|	+-------+	+-------+	|
	|	|	|	|	|	|
	|	|	|	|	|	|
	|	|  TCP	|	| multi	|	|
	|	|	|	| -cast	|	|
	|	|	|	|	|	|
	|	+-------+	+-------+	|
	+---------------------------------------+
		|			/\
		|			|
		\/			|
	+---------------------------------------+
			internet
