package core.test;

import java.util.ArrayList;

public class RunTests {

	public static void main(String[] args) {

		int testNum = 1;

		for( Class c : getList() ){

			boolean implemented = false;

			if( core.test.BaseTest.class.equals( c.getSuperclass() ) ){
				implemented = true;
			}else{

				for( Class interfac : c.getInterfaces() ){

					if( interfac.equals( core.test.ITest.class ) ){
						implemented = 
							(
									(c.getModifiers() & java.lang.reflect.Modifier.ABSTRACT )
									| (c.getModifiers() & java.lang.reflect.Modifier.INTERFACE)
							) == 0;
						break;
					}
				}
			}

			if( implemented ){
				boolean passed = false;
				try {
					ITest test = (ITest)c.newInstance();
					test.setTestNum( testNum );
					System.out.println("Test : "+ c.getName());
					System.out.flush();
					passed = test.test();
				} catch ( Exception e ) {
					e.printStackTrace();	
				} catch ( Error e ){
					e.printStackTrace();
				}finally{
					if( passed ){
						System.out.println("\tPassed");
					}else{
						System.out.println("\tFailed");
					}
				}
			}
		}
	}

	//TODO keep up to date
	public static ArrayList<Class> getList(){
		ArrayList<Class> result = new ArrayList<Class>();

		//generated by running 'ClassLister.sh ./Shrieking\ Mushroom'

		result.add( core.ByteBuilder.class );
		result.add( core.exceptions.TryGetException.class );
		result.add( core.logging.LocalTextLogger.class );
		result.add( core.logging.ILogger.class );
		result.add( core.logging.LoggingFailedException.class );
		result.add( core.multithreading.implementation.TimeMark.class );
		result.add( core.multithreading.ITimeMarker.class );
		result.add( core.multithreading.tests.TimeMarkerTests.class );
		result.add( core.test.BaseTest.class );
		result.add( core.TestFunctionality.class );
		result.add( core.test.ITest.class );
		result.add( core.test.RunTests.class );
		result.add( core.tests.ByteBuilderTest.class );
		result.add( core.tests.UtilTests.class );
		result.add( core.test.TestingException.class );
		result.add( core.test.TestUtils.class );
		result.add( core.Tupple.class );
		result.add( core.uservars.exceptions.VariableError.class );
		result.add( core.uservars.exceptions.VariableException.class );
		result.add( core.uservars.exceptions.VariableNotBoolException.class );
		result.add( core.uservars.exceptions.VariableNotExpectedTypeException.class );
		result.add( core.uservars.exceptions.VariableNotIntException.class );
		result.add( core.uservars.exceptions.VariableRequiredException.class );
		result.add( core.uservars.IDefaultVariableSetup.class );
		result.add( core.uservars.ILanguageLibrary.class );
		result.add( core.uservars.implementation.DefaultVariableStore.class );
		result.add( core.uservars.implementation.EnglishLanguageStore.class );
		result.add( core.uservars.implementation.LocalTextVariableFactory.class );
		result.add( core.uservars.implementation.UserLanguageLookup.class );
		result.add( core.uservars.implementation.UserVariable.class );
		result.add( core.uservars.implementation.UserVariableHandler.class );
		result.add( core.uservars.implementation.UserVariableStore.class );
		result.add( core.uservars.implementation.VariableSetup.class );
		result.add( core.uservars.IVariable.class );
		result.add( core.uservars.IVariableFactory.class );
		result.add( core.uservars.IVariableHandler.class );
		result.add( core.uservars.IVariableStore.class );
		result.add( core.uservars.tests.UserVariableFactoryTests.class );
		result.add( core.uservars.tests.UserVariableHandlerTests.class );
		result.add( core.uservars.tests.UserVariableStoreTests.class );
		result.add( core.uservars.tests.UserVariableTests.class );
		result.add( core.Util.class );
		result.add( crypto.IOModule.class );
		result.add( featureTesting.DHKeyAgreement2.class );
		result.add( featureTesting.DHKeyAgreement3.class );
		result.add( handlers.IMessageHandler.class );
		result.add( networking.Client.class );
		result.add( networking.exceptions.BufferFullException.class );
		result.add( networking.exceptions.ConnectionClosedException.class );
		result.add( networking.exceptions.InsufficientMessageLengthException.class );
		result.add( networking.exceptions.MalformedMessageException.class );
		result.add( networking.exceptions.MulticastUnavailableException.class );
		result.add( networking.io.ConnectionFactory.class );
		result.add( networking.io.IMessage.class );
		result.add( networking.io.IMessageFactory.class );
		result.add( networking.io.IMessageStream.class );
		result.add( networking.io.implementation.Connection.class );
		result.add( networking.io.implementation.Message.class );
		result.add( networking.io.implementation.MessageFactory.class );
		result.add( networking.io.implementation.MulticastConnection.class );
		result.add( networking.io.implementation.MulticastIO.class );
		result.add( networking.io.implementation.UnicastConnection.class );
		result.add( networking.io.implementation.UnicastIO.class );
		result.add( networking.io.INetworkIO.class );
		result.add( networking.io.MessageType.class );
		result.add( networking.io.tests.MessageTests.class );
		result.add( networking.Server.class );
		result.add( networking.ServerThread.class );
		result.add( networking.io.tests.MessageFactoryTests.class );


		return result;
	}

}
